<?php

/**
 * Created by Reliese Model.
 */

namespace App\Models;

use App\Notifications\WelcomeCustomerNotification;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;

/**
 * Class Customer
 *
 * @property int $id
 * @property string $firstname
 * @property string $lastname
 * @property string $email
 * @property string $legal_counsel
 * @property Carbon $profile_date
 * @property Carbon $dob
 * @property string $passport
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 *
 * @property Collection|CustomerCase[] $customer_cases
 *
 * @package App\Models
 */
class Customer extends Model
{

    use Notifiable, HasFactory;

	protected $table = 'customers';

	protected $casts = [
		'profile_date' => 'datetime',
		'dob' => 'datetime'
	];

	protected $fillable = [
		'firstname',
		'lastname',
		'email',
		'profile_date',
        'legal_counsel',
		'dob',
		'passport'
	];

    protected $withCount = ['customer_cases'];

    protected $appends = ['image'];

    public function getImageAttribute()
    {
        return $this->passport !== NULL ? app()->make('url')->to('/').'/'.$this->passport : app()->make('url')->to('/').'/customer/default.jpg';
    }

	public function customer_cases()
	{
		return $this->hasMany(CustomerCase::class);
	}


    public function scopesearch($query)
    {
        $string = request()->get('criterial');

        if(! $string) return $query;

        $string = explode(" ", $string);

        foreach ($string as $char){
            $query->orWhere('lastname', 'LIKE', '%'.$char.'%');
        }

        return $query;

    }


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($customer){

            $customer->notify(new WelcomeCustomerNotification($customer)); // trigger welcome email notifcation

        });

        self::creating(function($customer){
            self::uploadPassport($customer);
        });

        self::updating(function($customer){
            self::uploadPassport($customer);
        });
    }


    private static function uploadPassport(Customer $customer)
    {
        if($customer->passport !== NULL)
        {
            \File::delete(public_path($customer->passport)); // passport has been added before delete so new passport can be added
        }

        if(request()->hasFile('passport'))
        {
            $destinationPath = 'customer';
            $passport =  request()->file('passport');
            $name = time() .'_'.  $passport->getClientOriginalName();
            $passport->move(public_path($destinationPath), $name);

            $customer->passport = $destinationPath."/".$name;

        }
    }



}
